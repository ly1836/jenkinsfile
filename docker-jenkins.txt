
mkdir -p /home/deploy/jenkins/data
chown -R 1000 /home/deploy/jenkins/data
mkdir -p /home/deploy/jenkins/maven
#上传maven配置文件
cd /home/deploy/jenkins


#---------------------------------------------------

docker run -d \
-p 8099:8080 -p 50099:50000 \
-v /usr/bin/docker:/usr/bin/docker \
-v /var/run/docker.sock:/var/run/docker.sock \
-v /home/deploy/jenkins/data:/var/jenkins_home \
-v /home/deploy/jenkins/maven/settings.xml:/home/maven/settings.xml \
-v /home/deploy/jdk/jdk1.8.0_281:/usr/local/java/jdk1.8.0_281 \
--name jenkins jenkins/jenkins:2.440.3-lts-jdk17-ly
#--name registry.cn-hangzhou.aliyuncs.com/aliyun_name_space_ly/jenkins:2.440.3-lts-jdk17-ly




#---------------------------------------------------
#容器内访问宿主机docker设置权限
#1.以root用户进入容器
docker exec -it --user root jenkins /bin/bash
#2.docker登录证书问题
mkdir -p /etc/docker
echo '{"insecure-registries": ["192.168.1.98","192.168.1.98:443"]},"registry-mirrors": ["https://docker.nju.edu.cn"]' > /etc/docker/daemon.json
#3.修改文件主
chown -R jenkins:jenkins /usr/bin/docker
chown -R jenkins:jenkins /var/run/docker.sock
chown -R jenkins:jenkins /etc/docker/daemon.json


#---------------------------------------------------
#安装必要插件
#1.SSH Agent
#2.docker-workflow
#3.build-user-vars-plugin

#需要配置全局工具
http://192.168.1.79:8099/manage/configureTools/
#1.maven-jenkins-3_8_1     version：3.8.1
#2.jdk-jenkins-1._8_0_281  /usr/local/java/jdk1.8.0_281  (docker启动jenkins时挂载jdk目录)

#---------------------------------------------------
#权限问题
chown -R 1000 /home/deploy/jenkins/data
docker restart jenkins

#---------------------------------------------------
#设置开机启动
docker update --restart=always jenkins

#====================下面是命令注释========================================
#服务器端口8080：镜像端口8080
-p 8099:8080 -p 50099:50000
# jenkins容器与Docker守护进程通信， 如果jenkins容器需要实例化其他Docker容器，则该守护进程是必需的。
-v /var/run/docker.sock:/var/run/docker.sock
#数据保存目录
-v /home/deploy/jenkins/data:/var/jenkins_home
#挂载宿主机maven
-v /home/maven/apache-maven-3.8.1:/usr/local/maven/apache-maven-3.8.1
#挂载宿主机jdk
-v /usr/local/java/jdk1.8.0_281:/usr/local/java/jdk1.8.0_281

#---------------------------------------------------
#安装插件：https://plugins.jenkins.io/branch-api/releases/
#进入容器
docker exec -it jenkins /bin/bash
#以root用户进入容器
docker exec -it --user root jenkins /bin/bash
#安装插件
jenkins-plugin-cli --plugins branch-api:2.1152.v6f101e97dd77


#---------------------------------------------------
jenkins相关需要配置
1.获取github的token
https://github.com/settings/tokens

2.配置harbor仓库凭据

3.linux服务器使用私钥登录
3.1 ssh-keygen -t rsa -b 4096 -C "root@192.168.1.xx"
3.2 cat ~/.ssh/id_rsa.pub | ssh user@host "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"
3.3 保存私钥，id_rsa，配置到jenkins凭据，credentials类型。

4.配置jenkins系统代理，方便拉取github代码

5.jenkins使用宿主机的maven，且指定JDK版本，需要在maven的bin目录，找到./mvn脚本，加入以下代码：
unset JAVA_HOME
export JAVA_HOME="/usr/local/java/jdk1.8.0_281"
echo Maven设置指定JDK版本: $JAVA_HOME

#资料
https://developer.aliyun.com/article/892646


#docker hub 设置系统代理
mkdir -p /etc/systemd/system/docker.service.d
cat > /etc/systemd/system/docker.service.d/http-proxy.conf << EOF
[Service]
Environment="HTTP_PROXY=http://192.168.1.8:7890"
Environment="HTTPS_PROXY=http://192.168.1.8:7890"
EOF

systemctl daemon-reload
systemctl restart docker